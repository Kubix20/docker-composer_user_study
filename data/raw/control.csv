Carimbo de data/hora,I consider myself experienced with visual programming tools.,What visual programming tools have you used in the past?,I consider myself experienced with orchestration frameworks.,What orchestration frameworks have you used in the past?,I consider myself experienced with... [...the Linux operating system.],I consider myself experienced with... [...Docker.],I consider myself experienced with... [...Docker Compose for development purposes.],I consider myself experienced with... [...Docker Compose in production environments.],...worked on which have used Docker Compose?,... created/updated a docker-compose.yml file?,... used docker-compose.yml files created by others (colleagues or third parties)?,"In the docker-compose files I’ve written, I’ve configured…",What software have you used to manage Docker or Docker Compose resources?,Follow along these next steps. Tick each step as you complete it.,Follow along these next steps. Tick each step as you complete it.,Start time,Answer true or false to the following statements: [Some services use the default network.],Answer true or false to the following statements: [The votes are stored in the redis service.],Answer true or false to the following statements: [The named volume db-data is used to provide configurations to the postgres service at runtime.],Answer true or false to the following statements: [The redis service always exposes port 6379 on the host.],Answer true or false to the following statements: [The vote service uses a locally built image.],"What services depend on the redis service? (Answer in the format [services], e.g. ser1, ser2,...)","What ports are exposed to the host by which services? (Answer in the format: service-[ports], e.g. container-123,124)","What networks are used and what services are attached to each one? (Answer in the format: network-[services], e.g. net1-ser1, ser2,...; net2-ser1)",Finish time,Start time,Finish time,Start time,Finish time,Start time,Finish time,Mark the answers that best reflect your opinions. [It was easy working in the remote machine.],Mark the answers that best reflect your opinions. [The environment was distracting.],Mark the answers that best reflect your opinions. [I found the procedure instructions complex and difficult to follow.],Mark the answers that best reflect your opinions. [I found the task descriptions complex and difficult to follow.],"Mark the answers that best reflect your opinions. [Overall, I found the toolchain difficult to use.]",Mark the answers that best reflect your opinions. [I found it difficult to understand stacks with the toolchain.],Mark the answers that best reflect your opinions. [I found it easy to define stacks with the toolchain.],"Any comments? (about your experience, the experiment process, ...) "
2020/05/28 12:25:56,4,"Node-RED, Scratch, Excel",1,,Agree,Disagree,Disagree,Disagree,5,0,5,,,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the db to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",10:54:00,TRUE,FALSE,FALSE,FALSE,FALSE,"vote, worker","redis-6379, vote-5000:80, result-5001:80","frontend-redis,worker,vote; backend-db,worker,result",11:20:00,11:24:00,11:52:00,11:57:00,12:14:00,12:16:00,12:23:00,Strongly Agree,Strongly Disagree,Agree,Neutral,Disagree,Neutral,Neutral,"As a non-experienced individual with docker-compose, some tasks were harder due to the lack of knowledge towards docker-compose syntax and terminology"
2020/05/29 20:37:44,2,Excel,1,,Agree,Disagree,Disagree,Disagree,2,1,1,...configs,,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the db to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",18:59:00,FALSE,TRUE,TRUE,TRUE,FALSE,"vote, worker","redis-6379, vote-5000:80, result-5001:80","frontend-redis, vote, worker; backend-result, db, worker",19:16:00,19:19:00,19:47:00,19:48:00,20:19:00,20:21:00,20:34:00,Disagree,Disagree,Neutral,Neutral,Agree,Neutral,Neutral,
2020/05/30 18:27:06,3,"Blender Nodes, Scratch, Excel",1,,Agree,Agree,Agree,Agree,4,4,4,"...networks, ...configs",,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the db to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",16:51:00,TRUE,TRUE,TRUE,FALSE,FALSE,"vote, worker","vote-5000, result-5001","backend-db, result, worker; frontend-redis, vote, worker",17:04:00,17:06:00,17:30:00,17:33:00,18:04:00,18:06:00,18:24:00,Agree,Disagree,Disagree,Strongly Agree,Agree,Disagree,Agree,
2020/05/31 17:48:14,4,"Node-RED, Excel",3,Kubernetes,Agree,Agree,Agree,Agree,8,5,3,"...volumes, ...configs",,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the redis to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",16:54:00,FALSE,FALSE,FALSE,TRUE,FALSE,"vote, worker","redis - 6379, vote - 5000, result - 5001","frontend-vote, redis, worker; backend-worker, result,db",17:03:00,17:06:00,17:18:00,17:23:00,17:39:00,17:42:00,17:45:00,Strongly Agree,Strongly Disagree,Strongly Disagree,Disagree,Neutral,Neutral,Neutral,
2020/06/01 22:36:50,3,Excel,5,"Kubernetes, Docker",Stronly Agree,Stronly Agree,Stronly Agree,Neutral,7,7,10,"...volumes, ...networks, ...secrets",AWS,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the redis to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",21:37:00,FALSE,FALSE,TRUE,TRUE,FALSE,"vote, worker","redis-6379, vote-5000, result-5001","frontend-redis,vote;backend-db,result,worker;",21:46:00,21:48:00,22:08:00,22:09:00,22:26:00,22:27:00,22:34:00,Disagree,Strongly Agree,Disagree,Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,
2020/06/04 23:20:15,1,Excel,1,,Neutral,Disagree,Disagree,Disagree,2,0,2,,,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the redis to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",21:48:00,FALSE,TRUE,TRUE,TRUE,TRUE,"vote,worker","redis-6379, vote-80, result-80","fronted-redis,vote,worker; backend-db,result,worker",22:01:00,22:04:00,22:29:00,22:33:00,23:03:00,23:07:00,23:16:00,Strongly Agree,Strongly Disagree,Strongly Disagree,Neutral,Strongly Disagree,Neutral,Agree,Good first experience with docker
2020/06/06 20:25:41,4,"Node-RED, Scratch, Excel",4,Docker-compose,Agree,Agree,Agree,Neutral,5,4,1,"...volumes, ...networks",,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the redis to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",18:56:00,FALSE,FALSE,FALSE,TRUE,FALSE,"vote, worker","result-5001, vote-5000, redis-6379","frontend-redis,vote,worker; backend-db,result",19:05:00,19:08:00,19:32:00,19:36:00,20:07:00,20:15:00,20:23:00,Strongly Agree,Disagree,Agree,Neutral,Neutral,Disagree,Agree,
2020/06/07 18:23:30,2,"Node-RED, Excel",1,,Agree,Neutral,Neutral,Neutral,2,2,2,,,"1. Create a file in the tutorial folder located in the root directory named 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦.𝘺𝘮𝘭., 2. Set the version to ""3.6""., 3. Add the top level “services” declaration., 4. Add a service with the key web., 5. Set the image to kubix20/webapp_redis:latest., 6. Open the image page on Docker Hub to learn more about the service., 7. Expose port 80 of the container to 4000 on the host., 8. Add a service with the key redis., 9. Set the image to redis:alpine., 10. Add a depends_on property from the redis to the web service., 11. Set the the environment variable REDIS_HOST = redis on the web service., 12. Add the top level ""volumes"" declaration., 13. Add a volume with the key storage., 14. Mount the storage volume on /data in the redis service.","15. Ensure you've saved the file., 16. Run 𝘥𝘰𝘤𝘬𝘦𝘳-𝘤𝘰𝘮𝘱𝘰𝘴𝘦 𝘶𝘱 from the tutorial folder in the terminal., 17. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 18. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 19. Ctrl+C in the terminal to stop the running stack.",16:57:00,FALSE,TRUE,TRUE,TRUE,FALSE,"vote,worker","redis-6379, vote-5000, result-5001","frontend-redis,vote,worker; backend-db, result, worker;",17:06:00,17:08:00,17:33:00,17:37:00,18:07:00,18:09:00,18:21:00,Strongly Agree,Strongly Disagree,Strongly Disagree,Neutral,Neutral,Agree,Neutral,