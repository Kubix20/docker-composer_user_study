Carimbo de data/hora,I consider myself experienced with visual programming tools.,What visual programming tools have you used in the past?,I consider myself experienced with orchestration frameworks.,What orchestration frameworks have you used in the past?,I consider myself experienced with... [...the Linux operating system.],I consider myself experienced with... [...Docker.],I consider myself experienced with... [...Docker Compose for development purposes.],I consider myself experienced with... [...Docker Compose in production environments.],...worked on which have used Docker Compose?,... created/updated a docker-compose.yml file?,... used docker-compose.yml files created by others (colleagues or third parties)?,"In the docker-compose files I’ve written, I’ve configured…",What software have you used to manage Docker or Docker Compose resources?,Follow along these next steps. Tick each step as you complete it.,Follow along these next steps. Tick each step as you complete it.,Start time,Answer true or false to the following statements: [Some services use the default network.],Answer true or false to the following statements: [The votes are stored in the redis service.],Answer true or false to the following statements: [The named volume db-data is used to provide configurations to the postgres service at runtime.],Answer true or false to the following statements: [The redis service always exposes port 6379 on the host.],Answer true or false to the following statements: [The vote service uses a locally built image.],"What services depend on the redis service? (Answer in the format [services], e.g. ser1, ser2,...)","What ports are exposed to the host by which services? (Answer in the format: service-[ports], e.g. container-123,124)","What networks are used and what services are attached to each one? (Answer in the format: network-[services], e.g. net1-ser1, ser2,...; net2-ser1)",Finish time,Start time,Finish time,Start time,Finish time,Start time,Finish time,Mark the answers that best reflect your opinions. [It was easy working in the remote machine.],Mark the answers that best reflect your opinions. [The environment was distracting.],Mark the answers that best reflect your opinions. [I found the procedure instructions complex and difficult to follow.],Mark the answers that best reflect your opinions. [I found the task descriptions complex and difficult to follow.],"Mark the answers that best reflect your opinions. [Overall, I found the tool easy to learn.]","Mark the answers that best reflect your opinions. [Overall, I found the tool difficult to use.]",Mark the answers that best reflect your opinions. [I found it difficult to understand stacks with the tool.],Mark the answers that best reflect your opinions. [I found it easy to define stacks with the tool.],I find the visual map of artifacts.... [...helpful to understand stacks with less effort.],I find the visual map of artifacts.... [...helpful to understand stacks more quickly.],I find the visual map of artifacts.... [...helpful to define stacks with less effort.],I find the visual map of artifacts.... [...helpful to define stacks more quickly.],I find the integration with Docker Hub (image palette and links to the docs)... [...helpful to understand stacks with less effort.],I find the integration with Docker Hub (image palette and links to the docs)... [...helpful to understand stacks more quickly.],I find the integration with Docker Hub (image palette and links to the docs)... [...helpful to define stacks with less effort.],I find the integration with Docker Hub (image palette and links to the docs)... [...helpful to define stacks more quickly.],I find the visual feedback of running stacks (service and stack LEDs)... [...helpful to understand the state of a stack with less effort.],I find the visual feedback of running stacks (service and stack LEDs)... [...helpful to understand the state of a stacks more quickly.],I find executing commands in the UI (start and stop)... [...helpful to define stacks with less effort.],I find executing commands in the UI (start and stop)... [...helpful to define stacks more quickly.], In comparison to the conventional procedure (editing a docker-compose.yml file and docker cli)... [...I believe this tool would reduce the effort required to define Docker Compose stacks.]," In comparison to the conventional procedure (editing a docker-compose.yml file and docker cli)... [...overall, I found the tool useful.]", In comparison to the conventional procedure (editing a docker-compose.yml file and docker cli)... [...a Docker Compose stack visualized with the tool would be more difficult to understand.]," In comparison to the conventional procedure (editing a docker-compose.yml file and docker cli)... [...overall, I think this tool does not provide an effective solution to define Docker Compose stacks.]"," In comparison to the conventional procedure (editing a docker-compose.yml file and docker cli)... [...overall, I think this tool makes an improvement to the stack definition process.]",Mark the answers that best reflect your opinions [This tool would make it easier for practitioners to define Docker Compose stacks.],Mark the answers that best reflect your opinions [Using this tool would make it easier to communicate the stack architecture to other practitioners.],Mark the answers that best reflect your opinions [I would recommend this tool to work with Docker Compose.],Mark the answers that best reflect your opinions [I would like to use this tool in the future.],Mark the answers that best reflect your opinions [It would be easy for me to become skillful in using this tool to work with Docker Compose.],What do you think can be improved upon in the tool?,"Any comments? (about your experience, the experiment process, the tool itself, ...) "
2020/05/27 13:06:09,3,"Node-RED, Blender Nodes, Scratch, Simulink, Excel",1,,Agree,Neutral,Strongly Disagree,Strongly Disagree,5,,,"...networks, ...configs",,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",11:52:00,FALSE,FALSE,FALSE,TRUE,FALSE,"vote, worker","redis-6379, vote-5000, result-5001","frontend-worker,redis,vote; backend-db,result,worker",12:11:00,12:15:00,12:32:00,12:37:00,12:53:00,12:55:00,13:00:00,Strongly Agree,Strongly Disagree,Strongly Disagree,,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Agree,Disagree,Disagree,Disagree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Display quick link to host port; Copy paste entire artifacts,
2020/05/28 22:08:55,2,"Node-RED, Scratch, Excel",1,,Agree,Agree,Agree,Disagree,7,6,4,...volumes,,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",21:27:00,FALSE,FALSE,FALSE,FALSE,FALSE,"worker, vote","vote-5000, result-5001","frontend-redis,vote,worker; backend-worker,result",21:33:00,21:36:00,21:42:00,21:45:00,21:58:00,22:01:00,22:03:00,Agree,Disagree,Disagree,Disagree,Agree,Strongly Disagree,Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Neutral,Neutral,Agree,Agree,Neutral,Neutral,Neutral,Neutral,Strongly Agree,Strongly Agree,Disagree,Strongly Disagree,Agree,Agree,Agree,Strongly Agree,Agree,Agree,Color scheme,"Very good, helpful especially when using new Docker compose features without knowing their full reference syntax"
2020/05/29 17:06:30,4,"Node-RED, Blender Nodes, Unreal Engine Blueprints",2,Kubernetes,Stronly Agree,Agree,Neutral,Disagree,6,2,5,...volumes,,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",16:04:00,FALSE,FALSE,TRUE,TRUE,FALSE,"vote, worker","redis-6379, vote-5000, result-5001","frontend-redis,vote,worker, backend-worker,db,result",16:13:00,16:17:00,16:32:00,16:37:00,16:51:00,16:54:00,16:56:00,Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Dragging and dropping to an empty space should create the respective node.,"The tool worked flawlessly. Nonetheless, TeamViewer crashed throughout the experience and introduces a performance bottleneck."
2020/05/30 22:11:48,4,"Node-RED, Scratch, Excel",2,Kubernetes,Stronly Agree,Agree,Agree,Disagree,6,6,6,"...volumes, ...networks, ...configs",,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",21:23:00,FALSE,FALSE,FALSE,FALSE,FALSE,"app_worker, app_vote","app_vote-5000, app_result-5001, redis-auto","frontend-app_worker, redis, app_vote; backend-app_worker, postgres, app_result",21:32:00,21:34:00,21:43:00,21:45:00,21:58:00,22:00:00,22:03:00,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,"Refresh button, UI ","Liked it very much, would totally use. Wish I had this in LDSO."
2020/06/02 18:18:12,5,"Blender Nodes, Unreal Engine Blueprints, Scratch",2,Docker,Stronly Agree,Disagree,Disagree,Strongly Disagree,3,0,1,,,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",16:37:00,TRUE,FALSE,TRUE,TRUE,FALSE,"worker,vote","redis-80,vote-5000,service-5001,worker-80,db-80","frontend-redis,vote,worker;backend-worker,db,result",16:57:00,17:00:00,17:29:00,17:32:00,18:05:00,18:07:00,18:13:00,Agree,Strongly Disagree,Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Neutral,Strongly Agree,"Middle mouse to pan, nodes could have color coded inputs to make it more intuitive to connect between services, terminal could be bigger ",Granda Bruno
2020/06/02 23:06:43,2,"Node-RED, Excel",1,,Agree,Neutral,Neutral,Strongly Disagree,4,1,3,...volumes,,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",22:11:00,TRUE,TRUE,TRUE,TRUE,FALSE,"vote, worker","vote-5000, result-5001, redis-6379","frontend-worker,vote,redis;backend-db, results,worker",22:22:00,22:26:00,22:42:00,22:46:00,22:54:00,22:56:00,22:59:00,Disagree,Neutral,Strongly Disagree,Neutral,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Agree,Agree,"Make terminal expand more upwards
Maybe colors in the logs to make identifying errors easier","Having docker knwoledge strongly favors performance.
Mac does not work well with team viewer (e.g. scrolling and copy pasting)"
2020/06/05 10:25:29,2,"Node-RED, Excel",1,,Disagree,Strongly Disagree,Strongly Disagree,Strongly Disagree,3,0,1,,,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",09:26:00,FALSE,TRUE,TRUE,TRUE,TRUE,"worker, vote","result-5001, vote-5000","frontend-worker,redis,vote; backend-woker,db,result",09:33:00,09:36:00,09:53:00,09:57:00,10:09:00,10:12:00,10:16:00,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Neutral,Neutral,Neutral,Neutral,Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,"When changing text, the Enter button should apply changes. When editing text in the graphic editor, the Delete button doesn't work. The terminal should be able to come higher.",The tool is very useful and helps begginers to create docker files.
2020/06/08 17:31:34,3,"Excel, Music Production Software",3,Kubernetes,Agree,Agree,Agree,Neutral,5,5,5,"...volumes, ...configs, ...secrets",,"1. Open the Docker Composer tool (already running on the machine)., 2. Add a new service by right clicking in the graph area and selecting ‘New service’ in the context menu. This will be the 𝘄𝗲𝗯 service., 3. Set the key field to web and image to kubix20/webapp_redis either in the artifact or in the properties editor., 4.Open the Docker Hub page for the image kubix20/webapp_redis by clicking on the icon above the image input on the properties editor to learn more about the service., 5. Add a port entry in the properties editor mapping port 80 on the container to 4000 on the host., 6. Using the image palette search for the official redis image and drag it onto the graph area. This will be the 𝗿𝗲𝗱𝗶𝘀 service., 7. Set the key to redis and image tag to alpine., 8. Add a depends_on dependency from the web service to the redis service by dragging an arrow from the depends_on anchor point on the web service., 9. Add the environment variable in the properties editor REDIS_HOST=redis in the web service., 10. Add a volume via the context menu and set the key to storage., 11. Connect the redis service to the volume through the corresponding volume anchor point (green)., 12. Select the connection and set the target to /data in properties editor. This is the path where the volume will be mounted in container.","13. Click on the Start button in the toolbar to run the app., 14. Check the output in the terminal and verify that the message “Connected to DB” is printed by the web container, indicating that the web service has successfully connected to the database., 15. Make a GET request to localhost:4000 (using your preferred method, e.g. curl or browser) and verify the response “Connected to db” is received., 16. Click on the Stop button to stop the running stack., 17. Export the stack and save it in the tutorial folder located in the root directory with the name 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭.𝘺𝘮𝘭.",16:32:00,FALSE,FALSE,TRUE,FALSE,FALSE,"worker, vote","redis-auto, vote-5000, result-5001, ","frontend-redis,vote,worker , backend-result,db,worker,",16:48:00,16:53:00,17:05:00,17:07:00,17:15:00,17:17:00,17:21:00,Neutral,Neutral,Strongly Disagree,Strongly Disagree,Strongly Agree,Strongly Disagree,Strongly Disagree,Strongly Agree,Agree,Agree,Strongly Agree,Strongly Agree,Agree,Agree,Neutral,Neutral,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Strongly Agree,Disagree,Strongly Disagree,Strongly Agree,Strongly Agree,Agree,Strongly Agree,Strongly Agree,Strongly Agree,"Networks - have a list of connected services when clicking on network node
Artifacts - give more relevancy to node key instead of type
Env variables and secrets - autocomplete filepaths","Great tool, specially for creating stacks"